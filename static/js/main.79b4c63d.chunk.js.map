{"version":3,"sources":["components/Header.js","components/Node.js","algorithms/breadthfirstsearch.js","algorithms/depthfirstsearch.js","algorithms/djikshtra.js","components/Board.js","algorithms/randommaze.js","algorithms/stairDemonstration.js","components/PathSearcher.js","App.js","index.js"],"names":["Header","props","className","forHtml","id","value","algorithm","onChange","e","changeAlgorithm","target","Algorithms","map","algo","key","maze","changeMaze","Mazes","speed","changeSpeed","Speeds","Node","row","col","isStart","isFinish","isWall","onMouseEnter","onMouseUp","onMouseDown","extraclass","getNeighbours","grid","node","neighbours","push","length","filter","neighbour","isVisited","animateBFS","visitedNodesInOrder","nodesInShortestPathOrder","timeout","i","setTimeout","document","getElementById","disabled","animateShortestPath","visualiseBFS","startrow","startcol","finishrow","finishcol","startNode","finishNode","queue","currentNode","shift","forEach","previousNode","breadthfirstsearch","unshift","getNodesInShortestPathOrder","animateDFS","visualiseDFS","stack","pop","depthFirstSearch","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbours","unvisitedNeighbors","getUnvisitedNeighbors","getAllNodes","nodes","animateDjikshtra","visualiseDjikshtra","closestNode","Infinity","djikshtra","START_NODE_ROW","Math","floor","random","START_NODE_COLUMN","FINISH_NODE_ROW","FINISH_NODE_COLUMN","getInitialGrid","currentRow","createNode","totalDistance","g","heuristic","getNewGridWithWallToggled","newGrid","slice","newNode","resetGrid","clearGrid","clearPathGrid","Board","React","useState","setgrid","mouseIsPressed","setmouseIsPressed","useEffect","console","log","rows","columns","walls","wall","randommaze","currentIDX","currentIDY","wallNodes","stairDemonstration","Fragment","onClick","clearBoard","clearPath","clearMaze","border","rowId","nodeId","handleMouseDown","handleMouseEnter","PathSearcher","setalgorithm","setspeed","setmaze","App","ReactDOM","render"],"mappings":"8KA0DeA,EAxDA,SAAAC,GACb,OACE,yBAAKC,UAAU,UACb,6CACA,2BAAOC,QAAQ,cAAf,YAEE,4BACEC,GAAG,aACHC,MAAOJ,EAAMK,UACbC,SAAU,SAAAC,GAAC,OAAIP,EAAMQ,gBAAgBD,EAAEE,OAAOL,SAE7CJ,EAAMU,WAAWC,KAAI,SAAAC,GACpB,OACE,4BAAQC,IAAKD,EAAMR,MAAOQ,GACvBA,QAMX,2BAAOV,QAAQ,SAAf,OAEE,4BACEC,GAAG,QACHC,MAAOJ,EAAMc,KACbR,SAAU,SAAAC,GAAC,OAAIP,EAAMe,WAAWR,EAAEE,OAAOL,SAExCJ,EAAMgB,MAAML,KAAI,SAAAG,GACf,OACE,4BAAQD,IAAKC,EAAMV,MAAOU,GACvBA,QAMX,2BAAOZ,QAAQ,UAAf,QAEE,4BACEC,GAAG,SACHC,MAAOJ,EAAMiB,MACbX,SAAU,SAAAC,GAAC,OAAIP,EAAMkB,YAAYX,EAAEE,OAAOL,SAEzCJ,EAAMmB,OAAOR,KAAI,SAAAM,GAChB,OACE,4BAAQJ,IAAKI,EAAOb,MAAOa,GACxBA,U,OCdFG,EAhCF,SAAApB,GAAU,IAEnBqB,EAQErB,EARFqB,IACAC,EAOEtB,EAPFsB,IACAC,EAMEvB,EANFuB,QACAC,EAKExB,EALFwB,SACAC,EAIEzB,EAJFyB,OACAC,EAGE1B,EAHF0B,aACAC,EAEE3B,EAFF2B,UACAC,EACE5B,EADF4B,YAGIC,EAAaL,EACf,cACAD,EACA,aACAE,EACA,YACA,GACJ,OACE,wBACEtB,GAAE,eAAUkB,EAAV,YAAiBC,GACnBrB,UAAS,eAAU4B,GACnBH,aAAcA,EACdE,YAAaA,EACbD,UAAWA,GAEVJ,EAAU,IAAMC,EAAW,IAAM,OCHlCM,EAAgB,SAACC,EAAMC,GAC3B,IAAMC,EAAa,GACXZ,EAAaW,EAAbX,IAAKC,EAAQU,EAARV,IAOb,OALID,EAAM,GAAGY,EAAWC,KAAKH,EAAKV,EAAM,GAAGC,IACvCD,EAAMU,EAAKI,OAAS,GAAGF,EAAWC,KAAKH,EAAKV,EAAM,GAAGC,IACrDA,EAAM,GAAGW,EAAWC,KAAKH,EAAKV,GAAKC,EAAM,IACzCA,EAAMS,EAAK,GAAGI,OAAS,GAAGF,EAAWC,KAAKH,EAAKV,GAAKC,EAAM,IAEvDW,EAAWG,QAAO,SAAAC,GAAS,OAAKA,EAAUC,cA8B7CC,EAAa,SAACC,EAAqBC,EAA0BC,GACjE,IAD8E,IAAD,WACpEC,GACHA,IAAMH,EAAoBL,OAAS,GACrCS,YAAW,YApBW,SAAAH,GAC1B,IADuD,IAAD,WAC7CE,GACHA,IAAMF,EAAyBN,OAAS,IAC1CU,SAASC,eAAe,QAAQC,UAAW,EAC3CF,SAASC,eAAe,aAAaC,UAAW,EAChDF,SAASC,eAAe,aAAaC,UAAW,EAChDF,SAASC,eAAe,aAAaC,UAAW,EAChDF,SAASC,eAAe,cAAcC,UAAW,GAEnDH,YAAW,WACT,IAAMZ,EAAOS,EAAyBE,GACtCE,SAASC,eAAT,eAAgCd,EAAKX,IAArC,YAA4CW,EAAKV,MAAOrB,UACtD,uBACD,GAAK0C,IAZDA,EAAI,EAAGA,EAAIF,EAAyBN,OAAQQ,IAAM,EAAlDA,GAoBHK,CAAoBP,KACnBC,EAAUC,GAEfC,YAAW,WACT,IAAMZ,EAAOQ,EAAoBG,GAC5BX,EAAKT,SAAYS,EAAKR,WACzBqB,SAASC,eAAT,eAAgCd,EAAKX,IAArC,YAA4CW,EAAKV,MAAOrB,UACtD,kBACHyC,EAAUC,IAXNA,EAAI,EAAGA,EAAIH,EAAoBL,OAAQQ,IAAM,EAA7CA,IAeEM,EAAe,SAC1BlB,EACAmB,EACAC,EACAC,EACAC,EACApC,GAEA,IAIIyB,EAJEY,EAAYvB,EAAKmB,GAAUC,GAC3BI,EAAaxB,EAAKqB,GAAWC,GAC7Bb,EA3FmB,SAACT,EAAMuB,EAAWC,GAC3C,IAAMC,EAAQ,GACdA,EAAMtB,KAAKoB,GACXA,EAAUhB,WAAY,EAEtB,IADA,IAAME,EAAsB,GAJ8B,aAMxD,IAAIiB,EAAcD,EAAME,QAExB,OAAID,EAAYhC,OAAQ,YAExBe,EAAoBN,KAAKuB,GAErBA,IAAgBF,EAAkB,CAAN,EAAOf,QAEtBV,EAAcC,EAAM0B,GAE1BE,SAAQ,SAAAtB,GACjBA,EAAUC,WAAY,EACtBD,EAAUuB,aAAeH,EACzBD,EAAMtB,KAAKG,QAdS,IAAjBmB,EAAMrB,QAAc,CAAC,IAAD,+BAGD,SAHC,2CAkB3B,OAAOK,EAoEqBqB,CAAmB9B,EAAMuB,EAAWC,GAC1Dd,EAtD4B,SAAAT,GAGlC,IAFA,IAAMS,EAA2B,GAC7BgB,EAAczB,EACK,OAAhByB,GACLhB,EAAyBqB,QAAQL,GACjCA,EAAcA,EAAYG,aAE5B,OAAOnB,EA+C0BsB,CAA4BR,GAE/C,SAAVtC,EAAkByB,EAAU,GACb,YAAVzB,EAAqByB,EAAU,GACrB,SAAVzB,IAAkByB,EAAU,IACrCH,EAAWC,EAAqBC,EAA0BC,ICtEtDZ,EAAgB,SAACC,EAAMC,GAC3B,IAAMC,EAAa,GACXZ,EAAaW,EAAbX,IAAKC,EAAQU,EAARV,IAOb,OALID,EAAM,GAAGY,EAAWC,KAAKH,EAAKV,EAAM,GAAGC,IACvCD,EAAMU,EAAKI,OAAS,GAAGF,EAAWC,KAAKH,EAAKV,EAAM,GAAGC,IACrDA,EAAM,GAAGW,EAAWC,KAAKH,EAAKV,GAAKC,EAAM,IACzCA,EAAMS,EAAK,GAAGI,OAAS,GAAGF,EAAWC,KAAKH,EAAKV,GAAKC,EAAM,IAEvDW,EAAWG,QAAO,SAAAC,GAAS,OAAKA,EAAUC,cA8B7C0B,EAAa,SAACxB,EAAqBC,EAA0BC,GACjE,IAD8E,IAAD,WACpEC,GACHA,IAAMH,EAAoBL,OAAS,GACrCS,YAAW,YApBW,SAAAH,GAC1B,IADuD,IAAD,WAC7CE,GACHA,IAAMF,EAAyBN,OAAS,IAC1CU,SAASC,eAAe,QAAQC,UAAW,EAC3CF,SAASC,eAAe,aAAaC,UAAW,EAChDF,SAASC,eAAe,aAAaC,UAAW,EAChDF,SAASC,eAAe,aAAaC,UAAW,EAChDF,SAASC,eAAe,cAAcC,UAAW,GAEnDH,YAAW,WACT,IAAMZ,EAAOS,EAAyBE,GACtCE,SAASC,eAAT,eAAgCd,EAAKX,IAArC,YAA4CW,EAAKV,MAAOrB,UACtD,uBACD,GAAK0C,IAZDA,EAAI,EAAGA,EAAIF,EAAyBN,OAAQQ,IAAM,EAAlDA,GAoBHK,CAAoBP,KACnBC,EAAUC,GAEfC,YAAW,WACT,IAAMZ,EAAOQ,EAAoBG,GAC5BX,EAAKT,SAAYS,EAAKR,WACzBqB,SAASC,eAAT,eAAgCd,EAAKX,IAArC,YAA4CW,EAAKV,MAAOrB,UACtD,kBACHyC,EAAUC,IAXNA,EAAI,EAAGA,EAAIH,EAAoBL,OAAQQ,IAAM,EAA7CA,IAeEsB,EAAe,SAC1BlC,EACAmB,EACAC,EACAC,EACAC,EACApC,GAEA,IAIIyB,EAJEY,EAAYvB,EAAKmB,GAAUC,GAC3BI,EAAaxB,EAAKqB,GAAWC,GAC7Bb,EA5FiB,SAACT,EAAMuB,EAAWC,GACzC,IAAMW,EAAQ,GACdA,EAAMhC,KAAKoB,GACXA,EAAUhB,WAAY,EAGtB,IADA,IAAME,EAAsB,GAL4B,aAOtD,IAAIiB,EAAcS,EAAMC,MAExB,OAAIV,EAAYhC,OAAQ,YAExBe,EAAoBN,KAAKuB,GAErBA,IAAgBF,EAAkB,CAAN,EAAOf,QAEtBV,EAAcC,EAAM0B,GAE1BE,SAAQ,SAAAtB,GACjBA,EAAUC,WAAY,EACtBD,EAAUuB,aAAeH,EACzBS,EAAMhC,KAAKG,QAdS,IAAjB6B,EAAM/B,QAAc,CAAC,IAAD,+BAGD,SAHC,2CAkB3B,OAAOK,EAoEqB4B,CAAiBrC,EAAMuB,EAAWC,GACxDd,EAtD4B,SAAAT,GAGlC,IAFA,IAAMS,EAA2B,GAC7BgB,EAAczB,EACK,OAAhByB,GACLhB,EAAyBqB,QAAQL,GACjCA,EAAcA,EAAYG,aAE5B,OAAOnB,EA+C0BsB,CAA4BR,GAE/C,SAAVtC,EAAkByB,EAAU,GACb,YAAVzB,EAAqByB,EAAU,GACrB,SAAVzB,IAAkByB,EAAU,IACrCsB,EAAWxB,EAAqBC,EAA0BC,IC/EtD2B,EAAsB,SAAAC,GAC1BA,EAAeC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,SAAWD,EAAMC,aAGzDC,EAA4B,SAAC3C,EAAMD,GACvC,IAAM6C,EAAqBC,EAAsB7C,EAAMD,GADP,uBAEhD,YAAwB6C,EAAxB,+CAA4C,CAAC,IAAlCvC,EAAiC,QAC1CA,EAAUqC,SAAW1C,EAAK0C,SAAW,EACrCrC,EAAUuB,aAAe5B,GAJqB,oFAQ5C6C,EAAwB,SAAC7C,EAAMD,GACnC,IAAME,EAAa,GACXZ,EAAaW,EAAbX,IAAKC,EAAQU,EAARV,IAKb,OAJID,EAAM,GAAGY,EAAWC,KAAKH,EAAKV,EAAM,GAAGC,IACvCD,EAAMU,EAAKI,OAAS,GAAGF,EAAWC,KAAKH,EAAKV,EAAM,GAAGC,IACrDA,EAAM,GAAGW,EAAWC,KAAKH,EAAKV,GAAKC,EAAM,IACzCA,EAAMS,EAAK,GAAGI,OAAS,GAAGF,EAAWC,KAAKH,EAAKV,GAAKC,EAAM,IACvDW,EAAWG,QAAO,SAAAC,GAAS,OAAKA,EAAUC,cAG7CwC,EAAc,SAAA/C,GAClB,IAAMgD,EAAQ,GADY,uBAE1B,YAAkBhD,EAAlB,+CAAwB,CAAC,IAAdV,EAAa,+BACtB,YAAmBA,EAAnB,+CAAwB,CAAC,IAAdW,EAAa,QACtB+C,EAAM7C,KAAKF,IAFS,oFAFE,kFAO1B,OAAO+C,GAgCHC,EAAmB,SACvBxC,EACAC,EACAC,GAEA,IADI,IAAD,WACMC,GACHA,IAAMH,EAAoBL,OAAS,GACrCS,YAAW,YAxBW,SAAAH,GAC1B,IADuD,IAAD,WAC7CE,GACHA,IAAMF,EAAyBN,OAAS,IAC1CU,SAASC,eAAe,QAAQC,UAAW,EAC3CF,SAASC,eAAe,aAAaC,UAAW,EAChDF,SAASC,eAAe,aAAaC,UAAW,EAChDF,SAASC,eAAe,aAAaC,UAAW,EAChDF,SAASC,eAAe,cAAcC,UAAW,GAEnDH,YAAW,WACT,IAAMZ,EAAOS,EAAyBE,GACtCE,SAASC,eAAT,eAAgCd,EAAKX,IAArC,YAA4CW,EAAKV,MAAOrB,UACtD,uBACD,GAAK0C,IAZDA,EAAI,EAAGA,EAAIF,EAAyBN,OAAQQ,IAAM,EAAlDA,GAwBHK,CAAoBP,KACnBC,EAAUC,GAEfC,YAAW,WACT,IAAMZ,EAAOQ,EAAoBG,GAC5BX,EAAKT,SAAYS,EAAKR,WACzBqB,SAASC,eAAT,eAAgCd,EAAKX,IAArC,YAA4CW,EAAKV,MAAOrB,UACtD,kBACHyC,EAAUC,IAXNA,EAAI,EAAGA,EAAIH,EAAoBL,OAAQQ,IAAM,EAA7CA,IAeEsC,EAAqB,SAChClD,EACAmB,EACAC,EACAC,EACAC,EACApC,GAEA,IAIIyB,EAJEY,EAAYvB,EAAKmB,GAAUC,GAC3BI,EAAaxB,EAAKqB,GAAWC,GAC7Bb,EA9GU,SAACT,EAAMuB,EAAWC,GAClC,IAAMf,EAAsB,GAC5Bc,EAAUoB,SAAW,EAErB,IADA,IAAMJ,EAAiBQ,EAAY/C,GAC1BuC,EAAenC,QAAQ,CAC9BkC,EAAoBC,GACpB,IAAMY,EAAcZ,EAAeZ,QAEnC,IAAIwB,EAAYzD,OAAhB,CAGA,GAAIyD,EAAYR,WAAaS,IAAU,OAAO3C,EAG9C,GAFA0C,EAAY5C,WAAY,EACxBE,EAAoBN,KAAKgD,GACrBA,IAAgB3B,EAAY,OAAOf,EACvCmC,EAA0BO,EAAanD,KA+FbqD,CAAUrD,EAAMuB,EAAWC,GACjDd,EA1D4B,SAAAc,GAGlC,IAFA,IAAMd,EAA2B,GAC7BgB,EAAcF,EACK,OAAhBE,GACLhB,EAAyBqB,QAAQL,GACjCA,EAAcA,EAAYG,aAE5B,OAAOnB,EAmD0BsB,CAA4BR,GAE/C,SAAVtC,EAAkByB,EAAU,GACb,YAAVzB,EAAqByB,EAAU,GACrB,SAAVzB,IAAkByB,EAAU,IACrCsC,EAAiBxC,EAAqBC,EAA0BC,I,yjBC5GlE,IAGM2C,EAAiBC,KAAKC,MAFb,GAEmBD,KAAKE,UACjCC,EAAoBH,KAAKC,MAAM,GAAAD,KAAKE,SAA0B,GAC9DE,EAAkBJ,KAAKC,MAJd,GAIoBD,KAAKE,UAClCG,EAAqBL,KAAKC,MAC9B,GAAAD,KAAKE,SAA2CrD,IAmI5CyD,EAAiB,WAErB,IADA,IAAM7D,EAAO,GACJV,EAAM,EAAGA,EA3IL,GA2ImBA,IAAO,CAErC,IADA,IAAIwE,EAAa,GACRvE,EAAM,EAAGA,EA9IP,GA8IqBA,IAC9BuE,EAAW3D,KAAK4D,EAAWzE,EAAKC,IAElCS,EAAKG,KAAK2D,GAGZ,OAAO9D,GAGH+D,EAAa,SAACzE,EAAKC,GACvB,MAAO,CACLD,MACAC,MACAC,QAASF,IAAQgE,GAAkB/D,IAAQmE,EAC3CjE,SAAUH,IAAQqE,GAAmBpE,IAAQqE,EAC7ClE,QAAQ,EACRiD,SAAUS,IACV7C,WAAW,EACXsB,aAAc,KACdmC,cAAe,EACfC,EAAG,EACHC,UAAW,IAITC,EAA4B,SAACnE,EAAMV,EAAKC,GAC5C,IAAM6E,EAAUpE,EAAKqE,QACfpE,EAAOmE,EAAQ9E,GAAKC,GACpB+E,EAAO,KAAQrE,EAAR,CAAcP,QAASO,EAAKP,SAEzC,OADA0E,EAAQ9E,GAAKC,GAAO+E,EACbF,GAGHG,EAAY,SAAAvE,GAEhB,IADA,IAAMoE,EAAUpE,EAAKqE,QACZ/E,EAAM,EAAGA,EAAM8E,EAAQhE,OAAQd,IACtC,IAAK,IAAIC,EAAM,EAAGA,EAAM6E,EAAQ9E,GAAKc,OAAQb,IAAO,CAClD,IACM+E,EAAO,KADAF,EAAQ9E,GAAKC,GACb,CAEXG,QAAQ,EACRa,WAAW,EACXoC,SAAUS,MAEZgB,EAAQ9E,GAAKC,GAAO+E,EAE0C,cAA5DxD,SAASC,eAAT,eAAgCzB,EAAhC,YAAuCC,IAAOrB,YAE9C4C,SAASC,eAAT,eAAgCzB,EAAhC,YAAuCC,IAAOrB,UAAY,SAIhE,OAAOkG,GAGHI,EAAY,SAAAxE,GAEhB,IADA,IAAMoE,EAAUpE,EAAKqE,QACZ/E,EAAM,EAAGA,EAAM8E,EAAQhE,OAAQd,IACtC,IAAK,IAAIC,EAAM,EAAGA,EAAM6E,EAAQ9E,GAAKc,OAAQb,IAAO,CAClD,IAAMU,EAAOmE,EAAQ9E,GAAKC,GACrBU,EAAKT,SAAYS,EAAKR,SAShBQ,EAAKT,SACdsB,SAASC,eAAT,eAAgCzB,EAAhC,YAAuCC,IAAOrB,UAC5C,kBACF+B,EAAKM,WAAY,GACRN,EAAKR,WACdqB,SAASC,eAAT,eAAgCzB,EAAhC,YAAuCC,IAAOrB,UAC5C,mBACF+B,EAAKM,WAAY,IAfjBN,EAAKP,QAAS,EACdO,EAAK0C,SAAWS,IAChBnD,EAAKM,WAAY,EACjBN,EAAK4B,aAAe,KACpB5B,EAAK+D,cAAgB,EACrB/D,EAAKgE,EAAI,EACThE,EAAKiE,UAAY,EACjBpD,SAASC,eAAT,eAAgCzB,EAAhC,YAAuCC,IAAOrB,UAAY,SAU5DkG,EAAQ9E,GAAKC,GAAOU,EAGxB,OAAOmE,GAGHK,EAAgB,SAAAzE,GAEpB,IADA,IAAMoE,EAAUpE,EAAKqE,QACZ/E,EAAM,EAAGA,EAAM8E,EAAQhE,OAAQd,IACtC,IAAK,IAAIC,EAAM,EAAGA,EAAM6E,EAAQ9E,GAAKc,OAAQb,IAAO,CAClD,IAAMU,EAAOmE,EAAQ9E,GAAKC,GACrBU,EAAKT,SAAYS,EAAKR,UAAaQ,EAAKP,OAKlCO,EAAKT,SACdsB,SAASC,eAAT,eAAgCzB,EAAhC,YAAuCC,IAAOrB,UAC5C,kBACF+B,EAAKM,WAAY,GACRN,EAAKR,WACdqB,SAASC,eAAT,eAAgCzB,EAAhC,YAAuCC,IAAOrB,UAC5C,mBACF+B,EAAKM,WAAY,IAXjBN,EAAK0C,SAAWS,IAChBnD,EAAKM,WAAY,EACjBN,EAAK4B,aAAe,KACpBf,SAASC,eAAT,eAAgCzB,EAAhC,YAAuCC,IAAOrB,UAAY,SAU5DkG,EAAQ9E,GAAKC,GAAOU,EAGxB,OAAOmE,GAGMM,EAjPD,SAAAzG,GAAU,IAAD,EACG0G,IAAMC,SAAS,IADlB,mBACd5E,EADc,KACR6E,EADQ,OAEuBF,IAAMC,UAAS,GAFtC,mBAEdE,EAFc,KAEEC,EAFF,KAIrBJ,IAAMK,WAAU,WACd,IAAMhF,EAAO6D,IACbgB,EAAQ7E,KACP,CAAC6E,IAEJ,IAmDM9F,EAAO,WACXkG,QAAQC,IAAIjH,EAAMc,MACC,gBAAfd,EAAMc,MChFY,SAAAiB,GAIxB,IAHA,IAAImF,EAAOnF,EAAKI,OACZgF,EAAUpF,EAAK,GAAGI,OAClBiF,EAAQ,GACLA,EAAMjF,OAAS,KAAK,CACzB,IAAId,EAAMiE,KAAKC,MAAMD,KAAKE,SAAW0B,GACjC5F,EAAMgE,KAAKC,MAAMD,KAAKE,SAAW2B,GACjC1D,EAAc1B,EAAKV,GAAKC,GACvBmC,EAAYlC,SAAYkC,EAAYjC,UAAaiC,EAAYhC,SAChEgC,EAAYhC,QAAS,EACrB2F,EAAMlF,KAAKuB,IAIf2D,EAAMzD,SAAQ,SAAA0D,GACZxE,SAASC,eAAT,eAAgCuE,EAAKhG,IAArC,YAA4CgG,EAAK/F,MAAOrB,UACtD,eDgEgCqH,CAAWvF,GAC1B,cAAf/B,EAAMc,MEjFoB,SAAAiB,GAM9B,IALA,IAAIwF,EAAaxF,EAAKI,OAAS,EAC3BqF,EAAa,EAEbC,EAAY,GAEVF,EAAa,GAAKC,EAAazF,EAAK,GAAGI,QAAQ,CACjD,IAAIsB,EAAc1B,EAAKwF,GAAYC,GAC/B/D,EAAYlC,SAAYkC,EAAYjC,WACpCiC,EAAYhC,QAAS,EACrBgG,EAAUvF,KAAKuB,IAEnB8D,IACAC,IAGJ,KAAMD,EAAaxF,EAAKI,OAAS,GAAKqF,EAAazF,EAAK,GAAGI,QAAQ,CAC/D,IAAIsB,EAAc1B,EAAKwF,GAAYC,GAC/B/D,EAAYlC,SAAYkC,EAAYjC,WACpCiC,EAAYhC,QAAS,EACrBgG,EAAUvF,KAAKuB,IAEnB8D,IACAC,IAGJ,KAAMD,EAAa,GAAKC,EAAazF,EAAK,GAAGI,QAAQ,CACjD,IAAIsB,EAAc1B,EAAKwF,GAAYC,GAC/B/D,EAAYlC,SAAYkC,EAAYjC,WACpCiC,EAAYhC,QAAS,EACrBgG,EAAUvF,KAAKuB,IAEnB8D,IACAC,IAGJC,EAAU9D,SAAQ,SAAA3B,GACda,SAASC,eAAT,eAAgCd,EAAKX,IAArC,YAA4CW,EAAKV,MAAOrB,UAAY,eF4CxCyH,CAAmB3F,IAkBrD,OACE,kBAAC,IAAM4F,SAAP,KACE,yBAAK1H,UAAU,WACb,4BAAQE,GAAG,aAAayH,QAAS,kBAbpB,SAAA7F,GACjB,IAAMoE,EAAUI,EAAUxE,GAC1B6E,EAAQT,GAWmC0B,CAAW9F,KAAlD,eAGA,4BAAQ5B,GAAG,YAAYyH,QAAS,kBAXpB,SAAA7F,GAChB,IAAMoE,EAAUK,EAAczE,GAC9B6E,EAAQT,GASkC2B,CAAU/F,KAAhD,cAGA,4BAAQ5B,GAAG,YAAYyH,QAAS,kBAhEpC/E,SAASC,eAAe,QAAQC,UAAW,EAC3CF,SAASC,eAAe,aAAaC,UAAW,EAChDF,SAASC,eAAe,aAAaC,UAAW,EAChDF,SAASC,eAAe,aAAaC,UAAW,EAChDF,SAASC,eAAe,cAAcC,UAAW,OACzB,QAApB/C,EAAMK,UACR4C,EACElB,EACAsD,EACAI,EACAC,EACAC,EACA3F,EAAMiB,OAEmB,QAApBjB,EAAMK,UACb4D,EACElC,EACAsD,EACAI,EACAC,EACAC,EACA3F,EAAMiB,OAEmB,cAApBjB,EAAMK,WACb4E,EACElD,EACAsD,EACAI,EACAC,EACAC,EACA3F,EAAMiB,UAkCN,aACajB,EAAMK,WAEnB,4BAAQF,GAAG,OAAOyH,QAAS,kBAAM9G,MAAjC,QAGA,4BAAQX,GAAG,YAAYyH,QAAS,kBA9BpB,SAAA7F,GAChB,IAAMoE,EAAUG,EAAUvE,GAC1B6E,EAAQT,GA4BkC4B,CAAUhG,KAAhD,eAKF,2BAAOiG,OAAQ,GACZjG,EAAKpB,KAAI,SAACU,EAAK4G,GACd,OACE,wBAAIpH,IAAKoH,GACN5G,EAAIV,KAAI,SAACqB,EAAMkG,GACd,OACE,kBAAC,EAAD,CACErH,IAAKqH,EACL7G,IAAKW,EAAKX,IACVC,IAAKU,EAAKV,IACVC,QAASS,EAAKT,QACdC,SAAUQ,EAAKR,SACfC,OAAQO,EAAKP,OACbG,YAAa,kBAzGP,SAACP,EAAKC,GAC5B,IAAM6E,EAAUD,EAA0BnE,EAAMV,EAAKC,GACrDsF,EAAQT,GACRW,GAAkB,GAsGiBqB,CAAgBnG,EAAKX,IAAKW,EAAKV,MAClDK,UAAW,WAnG3BmF,GAAkB,IAoGFpF,aAAc,kBAjGP,SAACL,EAAKC,GAC7B,GAAKuF,EAAL,CACA,IAAMV,EAAUD,EAA0BnE,EAAMV,EAAKC,GACrDsF,EAAQT,IA8F4BiC,CAAiBpG,EAAKX,IAAKW,EAAKV,kBGvGzD+G,EA3BM,WACnB,IAAM3H,EAAa,CAAC,YAAa,MAAO,OAClCS,EAAS,CAAC,OAAQ,UAAW,QAC7BH,EAAQ,CAAC,cAAe,aAHL,EAKS2F,mBAASjG,EAAW,IAL7B,mBAKlBL,EALkB,KAKPiI,EALO,OAMC3B,mBAASxF,EAAO,IANjB,mBAMlBF,EANkB,KAMXsH,EANW,OAOD5B,mBAAS3F,EAAM,IAPd,mBAOlBF,EAPkB,KAOZ0H,EAPY,KASzB,OACE,oCACE,kBAAC,EAAD,CACE9H,WAAYA,EACZS,OAAQA,EACRH,MAAOA,EACPX,UAAWA,EACXG,gBAAiB,SAAAH,GAAS,OAAIiI,EAAajI,IAC3CU,WAAY,SAAAD,GAAI,OAAI0H,EAAQ1H,IAC5BG,MAAOA,EACPH,KAAMA,EACNI,YAAa,SAAAD,GAAK,OAAIsH,EAAStH,MAEjC,kBAAC,EAAD,CAAOZ,UAAWA,EAAWY,MAAOA,EAAOH,KAAMA,MCdxC2H,MARf,WACE,OACE,yBAAKxI,UAAU,OACb,kBAAC,EAAD,QCHNyI,IAASC,OAAO,kBAAC,EAAD,MAAS9F,SAASC,eAAe,U","file":"static/js/main.79b4c63d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = props => {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>Path Searcher</h1>\r\n      <label forHtml=\"algorithms\">\r\n        Algorithm\r\n        <select\r\n          id=\"algorithms\"\r\n          value={props.algorithm}\r\n          onChange={e => props.changeAlgorithm(e.target.value)}\r\n        >\r\n          {props.Algorithms.map(algo => {\r\n            return (\r\n              <option key={algo} value={algo}>\r\n                {algo}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      </label>\r\n      <label forHtml=\"mazes\">\r\n        Maze\r\n        <select\r\n          id=\"mazes\"\r\n          value={props.maze}\r\n          onChange={e => props.changeMaze(e.target.value)}\r\n        >\r\n          {props.Mazes.map(maze => {\r\n            return (\r\n              <option key={maze} value={maze}>\r\n                {maze}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      </label>\r\n      <label forHtml=\"speeds\">\r\n        Speed\r\n        <select\r\n          id=\"speeds\"\r\n          value={props.speed}\r\n          onChange={e => props.changeSpeed(e.target.value)}\r\n        >\r\n          {props.Speeds.map(speed => {\r\n            return (\r\n              <option key={speed} value={speed}>\r\n                {speed}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Node = props => {\r\n  const {\r\n    row,\r\n    col,\r\n    isStart,\r\n    isFinish,\r\n    isWall,\r\n    onMouseEnter,\r\n    onMouseUp,\r\n    onMouseDown\r\n  } = props;\r\n\r\n  const extraclass = isFinish\r\n    ? \"node-finish\"\r\n    : isStart\r\n    ? \"node-start\"\r\n    : isWall\r\n    ? \"node-wall\"\r\n    : \"\";\r\n  return (\r\n    <td\r\n      id={`node-${row}-${col}`}\r\n      className={`node ${extraclass}`}\r\n      onMouseEnter={onMouseEnter}\r\n      onMouseDown={onMouseDown}\r\n      onMouseUp={onMouseUp}\r\n    >\r\n      {isStart ? \"S\" : isFinish ? \"F\" : null}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","const breadthfirstsearch = (grid, startNode, finishNode) => {\r\n  const queue = [];\r\n  queue.push(startNode);\r\n  startNode.isVisited = true;\r\n  const visitedNodesInOrder = [];\r\n  while (queue.length !== 0) {\r\n    let currentNode = queue.shift();\r\n\r\n    if (currentNode.isWall) continue;\r\n\r\n    visitedNodesInOrder.push(currentNode);\r\n\r\n    if (currentNode === finishNode) return visitedNodesInOrder;\r\n\r\n    let neighbours = getNeighbours(grid, currentNode);\r\n\r\n    neighbours.forEach(neighbour => {\r\n      neighbour.isVisited = true;\r\n      neighbour.previousNode = currentNode;\r\n      queue.push(neighbour);\r\n    });\r\n  }\r\n\r\n  return visitedNodesInOrder;\r\n};\r\n\r\nconst getNeighbours = (grid, node) => {\r\n  const neighbours = [];\r\n  const { row, col } = node;\r\n\r\n  if (row > 0) neighbours.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col > 0) neighbours.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n\r\n  return neighbours.filter(neighbour => !neighbour.isVisited);\r\n};\r\n\r\nconst getNodesInShortestPathOrder = node => {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = node;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n};\r\n\r\nconst animateShortestPath = nodesInShortestPathOrder => {\r\n  for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n    if (i === nodesInShortestPathOrder.length - 1) {\r\n      document.getElementById(\"maze\").disabled = false;\r\n      document.getElementById(\"clearmaze\").disabled = false;\r\n      document.getElementById(\"clearpath\").disabled = false;\r\n      document.getElementById(\"visualise\").disabled = false;\r\n      document.getElementById(\"clearboard\").disabled = false;\r\n    }\r\n    setTimeout(() => {\r\n      const node = nodesInShortestPathOrder[i];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        \"node-shortest-path\";\r\n    }, 75 * i);\r\n  }\r\n};\r\n\r\nconst animateBFS = (visitedNodesInOrder, nodesInShortestPathOrder, timeout) => {\r\n  for (let i = 0; i < visitedNodesInOrder.length; i++) {\r\n    if (i === visitedNodesInOrder.length - 1) {\r\n      setTimeout(() => {\r\n        animateShortestPath(nodesInShortestPathOrder);\r\n      }, timeout * i);\r\n    }\r\n    setTimeout(() => {\r\n      const node = visitedNodesInOrder[i];\r\n      if (!node.isStart && !node.isFinish)\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node-visited\";\r\n    }, timeout * i);\r\n  }\r\n};\r\n\r\nexport const visualiseBFS = (\r\n  grid,\r\n  startrow,\r\n  startcol,\r\n  finishrow,\r\n  finishcol,\r\n  speed\r\n) => {\r\n  const startNode = grid[startrow][startcol];\r\n  const finishNode = grid[finishrow][finishcol];\r\n  const visitedNodesInOrder = breadthfirstsearch(grid, startNode, finishNode);\r\n  const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n  let timeout;\r\n  if (speed === \"Fast\") timeout = 10;\r\n  else if (speed === \"Average\") timeout = 35;\r\n  else if (speed === \"Slow\") timeout = 70;\r\n  animateBFS(visitedNodesInOrder, nodesInShortestPathOrder, timeout);\r\n};\r\n","const depthFirstSearch = (grid, startNode, finishNode) => {\r\n  const stack = [];\r\n  stack.push(startNode);\r\n  startNode.isVisited = true;\r\n\r\n  const visitedNodesInOrder = [];\r\n  while (stack.length !== 0) {\r\n    let currentNode = stack.pop();\r\n\r\n    if (currentNode.isWall) continue;\r\n\r\n    visitedNodesInOrder.push(currentNode);\r\n\r\n    if (currentNode === finishNode) return visitedNodesInOrder;\r\n\r\n    let neighbours = getNeighbours(grid, currentNode);\r\n\r\n    neighbours.forEach(neighbour => {\r\n      neighbour.isVisited = true;\r\n      neighbour.previousNode = currentNode;\r\n      stack.push(neighbour);\r\n    });\r\n  }\r\n\r\n  return visitedNodesInOrder;\r\n};\r\n\r\nconst getNeighbours = (grid, node) => {\r\n  const neighbours = [];\r\n  const { row, col } = node;\r\n\r\n  if (row > 0) neighbours.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col > 0) neighbours.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n\r\n  return neighbours.filter(neighbour => !neighbour.isVisited);\r\n};\r\n\r\nconst getNodesInShortestPathOrder = node => {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = node;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n};\r\n\r\nconst animateShortestPath = nodesInShortestPathOrder => {\r\n  for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n    if (i === nodesInShortestPathOrder.length - 1) {\r\n      document.getElementById(\"maze\").disabled = false;\r\n      document.getElementById(\"clearmaze\").disabled = false;\r\n      document.getElementById(\"clearpath\").disabled = false;\r\n      document.getElementById(\"visualise\").disabled = false;\r\n      document.getElementById(\"clearboard\").disabled = false;\r\n    }\r\n    setTimeout(() => {\r\n      const node = nodesInShortestPathOrder[i];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        \"node-shortest-path\";\r\n    }, 75 * i);\r\n  }\r\n};\r\n\r\nconst animateDFS = (visitedNodesInOrder, nodesInShortestPathOrder, timeout) => {\r\n  for (let i = 0; i < visitedNodesInOrder.length; i++) {\r\n    if (i === visitedNodesInOrder.length - 1) {\r\n      setTimeout(() => {\r\n        animateShortestPath(nodesInShortestPathOrder);\r\n      }, timeout * i);\r\n    }\r\n    setTimeout(() => {\r\n      const node = visitedNodesInOrder[i];\r\n      if (!node.isStart && !node.isFinish)\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node-visited\";\r\n    }, timeout * i);\r\n  }\r\n};\r\n\r\nexport const visualiseDFS = (\r\n  grid,\r\n  startrow,\r\n  startcol,\r\n  finishrow,\r\n  finishcol,\r\n  speed\r\n) => {\r\n  const startNode = grid[startrow][startcol];\r\n  const finishNode = grid[finishrow][finishcol];\r\n  const visitedNodesInOrder = depthFirstSearch(grid, startNode, finishNode);\r\n  const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n  let timeout;\r\n  if (speed === \"Fast\") timeout = 10;\r\n  else if (speed === \"Average\") timeout = 35;\r\n  else if (speed === \"Slow\") timeout = 70;\r\n  animateDFS(visitedNodesInOrder, nodesInShortestPathOrder, timeout);\r\n};\r\n","const djikshtra = (grid, startNode, finishNode) => {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    //if we encounter a wall, skip it\r\n    if (closestNode.isWall) continue;\r\n    //if the closest node is at a distance of infinity\r\n    //We must be trapped and should therefore stop\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbours(closestNode, grid);\r\n  }\r\n};\r\n\r\nconst sortNodesByDistance = unvisitedNodes => {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n};\r\n\r\nconst updateUnvisitedNeighbours = (node, grid) => {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbour of unvisitedNeighbors) {\r\n    neighbour.distance = node.distance + 1;\r\n    neighbour.previousNode = node;\r\n  }\r\n};\r\n\r\nconst getUnvisitedNeighbors = (node, grid) => {\r\n  const neighbours = [];\r\n  const { row, col } = node;\r\n  if (row > 0) neighbours.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col > 0) neighbours.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  return neighbours.filter(neighbour => !neighbour.isVisited);\r\n};\r\n\r\nconst getAllNodes = grid => {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n};\r\n\r\n//Backtracks from the finishNode to find the shortest path\r\n//Only works when called *after* the djikshtra method above\r\nconst getNodesInShortestPathOrder = finishNode => {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n};\r\n\r\nconst animateShortestPath = nodesInShortestPathOrder => {\r\n  for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n    if (i === nodesInShortestPathOrder.length - 1) {\r\n      document.getElementById(\"maze\").disabled = false;\r\n      document.getElementById(\"clearmaze\").disabled = false;\r\n      document.getElementById(\"clearpath\").disabled = false;\r\n      document.getElementById(\"visualise\").disabled = false;\r\n      document.getElementById(\"clearboard\").disabled = false;\r\n    }\r\n    setTimeout(() => {\r\n      const node = nodesInShortestPathOrder[i];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        \"node-shortest-path\";\r\n    }, 75 * i);\r\n  }\r\n};\r\n\r\nconst animateDjikshtra = (\r\n  visitedNodesInOrder,\r\n  nodesInShortestPathOrder,\r\n  timeout\r\n) => {\r\n  for (let i = 0; i < visitedNodesInOrder.length; i++) {\r\n    if (i === visitedNodesInOrder.length - 1) {\r\n      setTimeout(() => {\r\n        animateShortestPath(nodesInShortestPathOrder);\r\n      }, timeout * i);\r\n    }\r\n    setTimeout(() => {\r\n      const node = visitedNodesInOrder[i];\r\n      if (!node.isStart && !node.isFinish)\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node-visited\";\r\n    }, timeout * i);\r\n  }\r\n};\r\n\r\nexport const visualiseDjikshtra = (\r\n  grid,\r\n  startrow,\r\n  startcol,\r\n  finishrow,\r\n  finishcol,\r\n  speed\r\n) => {\r\n  const startNode = grid[startrow][startcol];\r\n  const finishNode = grid[finishrow][finishcol];\r\n  const visitedNodesInOrder = djikshtra(grid, startNode, finishNode);\r\n  const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n  let timeout;\r\n  if (speed === \"Fast\") timeout = 10;\r\n  else if (speed === \"Average\") timeout = 35;\r\n  else if (speed === \"Slow\") timeout = 70;\r\n  animateDjikshtra(visitedNodesInOrder, nodesInShortestPathOrder, timeout);\r\n};\r\n","import React from \"react\";\r\nimport Node from \"./Node\";\r\nimport { visualiseBFS } from \"../algorithms/breadthfirstsearch\";\r\nimport { visualiseDFS } from \"../algorithms/depthfirstsearch\";\r\nimport { visualiseDjikshtra } from \"../algorithms/djikshtra\";\r\nimport { stairDemonstration } from \"../algorithms/stairDemonstration\";\r\nimport { randommaze } from \"../algorithms/randommaze\";\r\n\r\nconst length = 56;\r\nconst height = 20;\r\n\r\nconst START_NODE_ROW = Math.floor(Math.random() * height);\r\nconst START_NODE_COLUMN = Math.floor(Math.random() * (length / 2) + 1);\r\nconst FINISH_NODE_ROW = Math.floor(Math.random() * height);\r\nconst FINISH_NODE_COLUMN = Math.floor(\r\n  Math.random() * (length - 2 - length / 2 + 1) + length / 2\r\n);\r\n\r\nconst Board = props => {\r\n  const [grid, setgrid] = React.useState([]);\r\n  const [mouseIsPressed, setmouseIsPressed] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    const grid = getInitialGrid();\r\n    setgrid(grid);\r\n  }, [setgrid]);\r\n\r\n  const handleMouseDown = (row, col) => {\r\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n    setgrid(newGrid);\r\n    setmouseIsPressed(true);\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setmouseIsPressed(false);\r\n  };\r\n\r\n  const handleMouseEnter = (row, col) => {\r\n    if (!mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n    setgrid(newGrid);\r\n  };\r\n\r\n  const visualise = () => {\r\n    document.getElementById(\"maze\").disabled = true;\r\n    document.getElementById(\"clearmaze\").disabled = true;\r\n    document.getElementById(\"clearpath\").disabled = true;\r\n    document.getElementById(\"visualise\").disabled = true;\r\n    document.getElementById(\"clearboard\").disabled = true;\r\n    if (props.algorithm === \"BFS\")\r\n      visualiseBFS(\r\n        grid,\r\n        START_NODE_ROW,\r\n        START_NODE_COLUMN,\r\n        FINISH_NODE_ROW,\r\n        FINISH_NODE_COLUMN,\r\n        props.speed\r\n      );\r\n    else if (props.algorithm === \"DFS\")\r\n      visualiseDFS(\r\n        grid,\r\n        START_NODE_ROW,\r\n        START_NODE_COLUMN,\r\n        FINISH_NODE_ROW,\r\n        FINISH_NODE_COLUMN,\r\n        props.speed\r\n      );\r\n    else if (props.algorithm === \"Djiksthra\")\r\n      visualiseDjikshtra(\r\n        grid,\r\n        START_NODE_ROW,\r\n        START_NODE_COLUMN,\r\n        FINISH_NODE_ROW,\r\n        FINISH_NODE_COLUMN,\r\n        props.speed\r\n      );\r\n  };\r\n\r\n  const maze = () => {\r\n    console.log(props.maze);\r\n    if (props.maze === \"Random Maze\") randommaze(grid);\r\n    if (props.maze === \"Staircase\") stairDemonstration(grid);\r\n  };\r\n\r\n  const clearMaze = grid => {\r\n    const newGrid = resetGrid(grid);\r\n    setgrid(newGrid);\r\n  };\r\n\r\n  const clearBoard = grid => {\r\n    const newGrid = clearGrid(grid);\r\n    setgrid(newGrid);\r\n  };\r\n\r\n  const clearPath = grid => {\r\n    const newGrid = clearPathGrid(grid);\r\n    setgrid(newGrid);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"buttons\">\r\n        <button id=\"clearboard\" onClick={() => clearBoard(grid)}>\r\n          Clear Board\r\n        </button>\r\n        <button id=\"clearpath\" onClick={() => clearPath(grid)}>\r\n          Clear Path\r\n        </button>\r\n        <button id=\"visualise\" onClick={() => visualise()}>\r\n          Visualise {props.algorithm}\r\n        </button>\r\n        <button id=\"maze\" onClick={() => maze()}>\r\n          Maze\r\n        </button>\r\n        <button id=\"clearmaze\" onClick={() => clearMaze(grid)}>\r\n          Clear Maze\r\n        </button>\r\n      </div>\r\n\r\n      <table border={1}>\r\n        {grid.map((row, rowId) => {\r\n          return (\r\n            <tr key={rowId}>\r\n              {row.map((node, nodeId) => {\r\n                return (\r\n                  <Node\r\n                    key={nodeId}\r\n                    row={node.row}\r\n                    col={node.col}\r\n                    isStart={node.isStart}\r\n                    isFinish={node.isFinish}\r\n                    isWall={node.isWall}\r\n                    onMouseDown={() => handleMouseDown(node.row, node.col)}\r\n                    onMouseUp={() => handleMouseUp()}\r\n                    onMouseEnter={() => handleMouseEnter(node.row, node.col)}\r\n                  />\r\n                );\r\n              })}\r\n            </tr>\r\n          );\r\n        })}\r\n      </table>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < height; row++) {\r\n    let currentRow = [];\r\n    for (let col = 0; col < length; col++) {\r\n      currentRow.push(createNode(row, col));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n\r\n  return grid;\r\n};\r\n\r\nconst createNode = (row, col) => {\r\n  return {\r\n    row,\r\n    col,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COLUMN,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COLUMN,\r\n    isWall: false,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    previousNode: null,\r\n    totalDistance: 0,\r\n    g: 0,\r\n    heuristic: 0\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = { ...node, isWall: !node.isWall };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst resetGrid = grid => {\r\n  const newGrid = grid.slice();\r\n  for (let row = 0; row < newGrid.length; row++) {\r\n    for (let col = 0; col < newGrid[row].length; col++) {\r\n      const node = newGrid[row][col];\r\n      const newNode = {\r\n        ...node,\r\n        isWall: false,\r\n        isVisited: false,\r\n        distance: Infinity\r\n      };\r\n      newGrid[row][col] = newNode;\r\n      if (\r\n        document.getElementById(`node-${row}-${col}`).className === \"node-wall\"\r\n      ) {\r\n        document.getElementById(`node-${row}-${col}`).className = \"node \";\r\n      }\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst clearGrid = grid => {\r\n  const newGrid = grid.slice();\r\n  for (let row = 0; row < newGrid.length; row++) {\r\n    for (let col = 0; col < newGrid[row].length; col++) {\r\n      const node = newGrid[row][col];\r\n      if (!node.isStart && !node.isFinish) {\r\n        node.isWall = false;\r\n        node.distance = Infinity;\r\n        node.isVisited = false;\r\n        node.previousNode = null;\r\n        node.totalDistance = 0;\r\n        node.g = 0;\r\n        node.heuristic = 0;\r\n        document.getElementById(`node-${row}-${col}`).className = \"node \";\r\n      } else if (node.isStart) {\r\n        document.getElementById(`node-${row}-${col}`).className =\r\n          \"node node-start\";\r\n        node.isVisited = false;\r\n      } else if (node.isFinish) {\r\n        document.getElementById(`node-${row}-${col}`).className =\r\n          \"node node-finish\";\r\n        node.isVisited = false;\r\n      }\r\n      newGrid[row][col] = node;\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst clearPathGrid = grid => {\r\n  const newGrid = grid.slice();\r\n  for (let row = 0; row < newGrid.length; row++) {\r\n    for (let col = 0; col < newGrid[row].length; col++) {\r\n      const node = newGrid[row][col];\r\n      if (!node.isStart && !node.isFinish && !node.isWall) {\r\n        node.distance = Infinity;\r\n        node.isVisited = false;\r\n        node.previousNode = null;\r\n        document.getElementById(`node-${row}-${col}`).className = \"node \";\r\n      } else if (node.isStart) {\r\n        document.getElementById(`node-${row}-${col}`).className =\r\n          \"node node-start\";\r\n        node.isVisited = false;\r\n      } else if (node.isFinish) {\r\n        document.getElementById(`node-${row}-${col}`).className =\r\n          \"node node-finish\";\r\n        node.isVisited = false;\r\n      }\r\n      newGrid[row][col] = node;\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nexport default Board;\r\n","export const randommaze = grid => {\r\n  let rows = grid.length;\r\n  let columns = grid[0].length;\r\n  let walls = [];\r\n  while (walls.length < 250) {\r\n    let row = Math.floor(Math.random() * rows);\r\n    let col = Math.floor(Math.random() * columns);\r\n    let currentNode = grid[row][col];\r\n    if (!currentNode.isStart && !currentNode.isFinish && !currentNode.isWall) {\r\n      currentNode.isWall = true;\r\n      walls.push(currentNode);\r\n    }\r\n  }\r\n\r\n  walls.forEach(wall => {\r\n    document.getElementById(`node-${wall.row}-${wall.col}`).className =\r\n      \"node-wall\";\r\n  });\r\n};\r\n","export const stairDemonstration = grid => {\r\n    let currentIDX = grid.length - 1;\r\n    let currentIDY = 0;\r\n\r\n    let wallNodes = [];\r\n\r\n    while(currentIDX > 1 && currentIDY < grid[0].length) {\r\n        let currentNode = grid[currentIDX][currentIDY];\r\n        if(!currentNode.isStart && !currentNode.isFinish) {\r\n            currentNode.isWall = true;\r\n            wallNodes.push(currentNode);\r\n        }\r\n        currentIDX--;\r\n        currentIDY++;\r\n    }\r\n\r\n    while(currentIDX < grid.length - 2 && currentIDY < grid[0].length) {\r\n        let currentNode = grid[currentIDX][currentIDY];\r\n        if(!currentNode.isStart && !currentNode.isFinish) {\r\n            currentNode.isWall = true;\r\n            wallNodes.push(currentNode);\r\n        }\r\n        currentIDX++;\r\n        currentIDY++;\r\n    }\r\n\r\n    while(currentIDX > 0 && currentIDY < grid[0].length) {\r\n        let currentNode = grid[currentIDX][currentIDY];\r\n        if(!currentNode.isStart && !currentNode.isFinish) {\r\n            currentNode.isWall = true;\r\n            wallNodes.push(currentNode);\r\n        }\r\n        currentIDX--;\r\n        currentIDY++;\r\n    }\r\n\r\n    wallNodes.forEach(node => {\r\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node-wall';\r\n    });\r\n}\r\n\r\n","import React, { useState } from \"react\";\r\nimport Header from \"./Header\";\r\nimport Board from \"./Board\";\r\n\r\nconst PathSearcher = () => {\r\n  const Algorithms = [\"Djiksthra\", \"BFS\", \"DFS\"];\r\n  const Speeds = [\"Fast\", \"Average\", \"Slow\"];\r\n  const Mazes = [\"Random Maze\", \"Staircase\"];\r\n\r\n  const [algorithm, setalgorithm] = useState(Algorithms[0]);\r\n  const [speed, setspeed] = useState(Speeds[0]);\r\n  const [maze, setmaze] = useState(Mazes[0]);\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        Algorithms={Algorithms}\r\n        Speeds={Speeds}\r\n        Mazes={Mazes}\r\n        algorithm={algorithm}\r\n        changeAlgorithm={algorithm => setalgorithm(algorithm)}\r\n        changeMaze={maze => setmaze(maze)}\r\n        speed={speed}\r\n        maze={maze}\r\n        changeSpeed={speed => setspeed(speed)}\r\n      />\r\n      <Board algorithm={algorithm} speed={speed} maze={maze} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PathSearcher;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport PathSearcher from \"./components/PathSearcher\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathSearcher />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}